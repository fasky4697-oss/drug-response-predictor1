{"file_contents":{"main.py":{"content":"","size_bytes":0},"pyproject.toml":{"content":"[project]\nname = \"python-template\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Your Name <you@example.com>\"]\nrequires-python = \">=3.11\"\ndependencies = []\n","size_bytes":157},"drug-response-predictor/README.md":{"content":"# Drug Response Predictor — Minimal Streamlit Starter\n\nThis is a minimal, tested skeleton for a **Drug Response Predictor** focusing on cancer drug sensitivity using multi-omics ideas.\nThe goal: get a working Streamlit app (MVP) that accepts simple input (expression + drug response), runs a light integration (PCA),\ntrains a RandomForest, and shows basic metrics + an interactive UMAP/PCA plot.\n\n## Contents\n- `app/streamlit_app.py` — Streamlit frontend (entrypoint)\n- `src/` — helper modules:\n  - `data_connectors.py` — sample data loader & upload helpers\n  - `preprocessing.py` — simple normalization & harmonization helpers\n  - `integration.py` — PCA-based latent factor extraction (quick alternative to MOFA)\n  - `modeling.py` — training and prediction wrappers\n  - `explain.py` — optional SHAP integration (gracefully degrades if SHAP absent)\n- `example_data/` — tiny toy CSVs to test the app\n- `requirements.txt` — minimal packages to run the app\n\n## Quick start (locally)\n1. Clone repo.\n2. Create virtualenv and install requirements:\n   ```\n   python -m venv .venv\n   source .venv/bin/activate    # or .venv\\Scripts\\activate on Windows\n   pip install -r requirements.txt\n   ```\n3. Run app:\n   ```\n   streamlit run app/streamlit_app.py\n   ```\n4. Upload CSVs via the app or choose the included example data.\n\n## Design notes\n- This starter intentionally avoids heavy dependencies (e.g., MOFA) to keep the app runnable on Streamlit Community Cloud.\n- Places to extend: replace PCA with MOFA/mofapy2, add connectors for DepMap/GDSC/GDC, add drug branch (SMILES/graph), add more advanced CV and model registry.\n\n## License\nMIT\n","size_bytes":1650},"drug-response-predictor/app/streamlit_app.py":{"content":"import streamlit as st\nfrom src.data_connectors import load_example_data, read_uploaded_csvs\nfrom src.preprocessing import harmonize_expression, prepare_target\nfrom src.integration import run_pca, umap_from_latent\nfrom src.modeling import train_rf, evaluate_regression\nfrom src.explain import shap_summary_or_message\nimport pandas as pd\n\nst.set_page_config(page_title='Drug Response Predictor (MVP)', layout='wide')\nst.title('Drug Response Predictor — MVP (PCA + RF)')\n\nst.sidebar.header('Data')\nuse_example = st.sidebar.checkbox('Use example data', value=True)\n\nif use_example:\n    expr_df, target_df = load_example_data()\n    st.sidebar.write('Example data loaded: small toy dataset')\nelse:\n    uploaded = st.sidebar.file_uploader('Upload CSVs: expression (genes x samples) and drug response (sample, response)', accept_multiple_files=True)\n    expr_df, target_df = read_uploaded_csvs(uploaded)\n\nif expr_df is None or target_df is None:\n    st.info('Upload both expression and drug response CSVs or choose example data.')\n    st.stop()\n\nst.subheader('Data preview')\nc1, c2 = st.columns(2)\nwith c1:\n    st.write('Expression (top rows)')\n    st.dataframe(expr_df.head())\nwith c2:\n    st.write('Drug response (top rows)')\n    st.dataframe(target_df.head())\n\n# Preprocess\nexpr_h = harmonize_expression(expr_df)\ny, sample_index = prepare_target(target_df, expr_h.columns.tolist())\nif y is None:\n    st.error('Could not align samples between expression and target. Check sample IDs.')\n    st.stop()\n\nst.subheader('Integration: PCA latent factors')\nn_components = st.slider('Number of PCA components (latent factors)', min_value=2, max_value=10, value=4)\nlatent_df = run_pca(expr_h, n_components=n_components)\nst.write('Latent factors (samples x components)')\nst.dataframe(latent_df.head())\n\nst.plotly_chart(umap_from_latent(latent_df), use_container_width=True)\n\n# Modeling\nst.subheader('Train model (RandomForest)')\ntest_size = st.slider('Test set fraction', min_value=0.1, max_value=0.5, value=0.2)\nif st.button('Train & Evaluate'):\n    model, scores, X_test, y_test, y_pred = train_rf(latent_df, y, test_size=test_size)\n    st.success(f'Cross-validated R^2 (5-fold on training): mean={scores.mean():.3f} ± {scores.std():.3f}')\n    st.write('Hold-out test metrics:')\n    st.write(evaluate_regression(y_test, y_pred))\n    # Explain\n    st.subheader('Explainability (SHAP)')\n    shap_msg = shap_summary_or_message(model, X_test, feature_names=latent_df.columns.tolist())\n    st.write(shap_msg)\n\nst.sidebar.markdown('---')\nst.sidebar.markdown('This is a minimal starter. Extend connectors, add MOFA/VAE, or add drug encoders (SMILES).')\n","size_bytes":2635},"drug-response-predictor/src/data_connectors.py":{"content":"import pandas as pd\nimport io\n\ndef load_example_data():\n    # tiny toy dataset: 50 genes x 30 samples\n    expr_csv = pkg_data('example_data/sample_expression.csv')\n    target_csv = pkg_data('example_data/sample_drug_response.csv')\n    expr = pd.read_csv(expr_csv, index_col=0)\n    target = pd.read_csv(target_csv)\n    return expr, target\n\ndef read_uploaded_csvs(uploaded_files):\n    \"\"\"Expect two CSVs: expression (genes x samples) and target (sample, response).\n    Return (expr_df, target_df) or (None, None) on failure.\"\"\"\n    if not uploaded_files or len(uploaded_files) < 1:\n        return None, None\n    # Simple heuristic: pick largest file as expression\n    files = sorted(uploaded_files, key=lambda f: -getattr(f, 'size', 0))\n    try:\n        expr = pd.read_csv(files[0])\n        # if first column is gene names, set index\n        if expr.columns[0].lower() in ('gene','gene_id','genes','id'):\n            expr = expr.set_index(expr.columns[0])\n        target = None\n        if len(files) > 1:\n            target = pd.read_csv(files[1])\n        return expr, target\n    except Exception as e:\n        print('read_uploaded_csvs error', e)\n        return None, None\n\n# helper to return packaged example file path\ndef pkg_data(relpath):\n    return f\"/mnt/data/drug-response-predictor/{relpath}\"\n","size_bytes":1300},"drug-response-predictor/src/explain.py":{"content":"def shap_summary_or_message(model, X_test, feature_names=None):\n    try:\n        import shap\n        import pandas as pd\n        explainer = shap.Explainer(model)\n        shap_vals = explainer(X_test)\n        # show a short textual summary (Streamlit will render)\n        mean_abs = pd.DataFrame(abs(shap_vals.values).mean(axis=0).reshape(1,-1), columns=feature_names)\n        top = mean_abs.T.sort_values(by=0, ascending=False).head(10)\n        return {'shap_top_features': top.index.tolist(), 'shap_values': top[0].tolist()}\n    except Exception as e:\n        return f'SHAP not available or failed: {e}. Install \"shap\" to enable explanations.' \n","size_bytes":647},"drug-response-predictor/src/integration.py":{"content":"import pandas as pd\nfrom sklearn.decomposition import PCA\nimport umap\nimport plotly.express as px\n\ndef run_pca(expr_df, n_components=4):\n    # expr_df: genes x samples -> we want samples x genes\n    mat = expr_df.T.values\n    pca = PCA(n_components=n_components)\n    Z = pca.fit_transform(mat)\n    cols = [f'PC{i+1}' for i in range(Z.shape[1])]\n    return pd.DataFrame(Z, index=expr_df.columns, columns=cols)\n\ndef umap_from_latent(latent_df):\n    reducer = umap.UMAP(n_components=2, random_state=42)\n    embedding = reducer.fit_transform(latent_df.values)\n    df = pd.DataFrame(embedding, index=latent_df.index, columns=['UMAP1','UMAP2'])\n    df_plot = df.reset_index().rename(columns={'index':'sample'})\n    fig = px.scatter(df_plot, x='UMAP1', y='UMAP2', hover_data=['sample'])\n    return fig\n","size_bytes":795},"drug-response-predictor/src/modeling.py":{"content":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import r2_score, mean_squared_error\n\ndef train_rf(latent_df, y_series, test_size=0.2, random_state=42):\n    # align\n    X = latent_df.loc[y_series.index].values\n    y = y_series.loc[latent_df.index].values if set(latent_df.index) <= set(y_series.index) else y_series.loc[latent_df.index].values\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n    model = RandomForestRegressor(n_estimators=200, random_state=random_state)\n    scores = cross_val_score(model, X_train, y_train, cv=5, scoring='r2')\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    return model, scores, X_test, y_test, y_pred\n\ndef evaluate_regression(y_true, y_pred):\n    return {\n        'r2': float(r2_score(y_true, y_pred)),\n        'rmse': float(mean_squared_error(y_true, y_pred, squared=False))\n    }\n","size_bytes":1036},"drug-response-predictor/src/preprocessing.py":{"content":"import pandas as pd\nimport numpy as np\n\ndef harmonize_expression(expr_df):\n    \"\"\"Simple harmonization:\n    - If genes on rows and samples on columns: keep as is\n    - If samples on rows: transpose\n    - Log2(TPM+1)-like transform if necessary\n    \"\"\"\n    df = expr_df.copy()\n    # if samples appear to be rows (many columns labeled like gene1,gene2) use as-is\n    # Heuristic: if index looks numeric (1..n) and columns contain 'TCGA' or 'Sample' strings, transpose\n    if df.shape[0] < df.shape[1] and df.index.dtype == object and df.columns.dtype == object and df.columns.str.contains('Sample|TCGA|CCLE', case=False).sum() == 0:\n        # assume genes x samples already (genes in index)\n        pass\n    # ensure genes are rows and samples are columns\n    if not all(isinstance(i, str) for i in df.index):\n        df = df.set_index(df.columns[0])\n    # convert to numeric\n    df = df.apply(pd.to_numeric, errors='coerce')\n    # fill NaN\n    df = df.fillna(df.median(axis=1), axis=0).fillna(0)\n    # log2 transform if values high\n    if (df.values.max() > 100).any():\n        df = np.log2(df + 1)\n    return df\n\ndef prepare_target(target_df, sample_list):\n    \"\"\"Expect target_df with columns ['sample','response'] or first column sample and second response.\n    Align target to sample_list (expression columns). Returns y (pd.Series) and sample_index (list).\n    \"\"\"\n    if target_df is None:\n        return None, None\n    df = target_df.copy()\n    if df.shape[1] >= 2:\n        sample_col = df.columns[0]\n        resp_col = df.columns[1]\n    else:\n        return None, None\n    df = df.rename(columns={sample_col: 'sample', resp_col: 'response'})\n    # basic alignment: intersection\n    samples = [s for s in sample_list if s in df['sample'].values]\n    if not samples:\n        # maybe sample ids are in index\n        df2 = df.set_index('sample')\n        common = [s for s in sample_list if s in df2.index]\n        if not common:\n            return None, None\n        y = df2.loc[common, 'response']\n        return y, common\n    df2 = df.set_index('sample')\n    y = df2.loc[samples, 'response']\n    return y, samples\n","size_bytes":2119}},"version":1}